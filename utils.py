{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1oVt7T6tb90Y1EXvFaIWgm72emqZZPXi4","timestamp":1685762292274}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["CODE BLOCK: 1"],"metadata":{"id":"n09vaEgP6pLj"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"6PlbomWY3RSq"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision import datasets, transforms"]},{"cell_type":"markdown","source":["CODE BLOCK: 2"],"metadata":{"id":"VjBHHQVA6sXt"}},{"cell_type":"code","source":["# CUDA?\n","cuda = torch.cuda.is_available()\n","print(\"CUDA Available?\", cuda)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"94BxVVBP3WwS","executionInfo":{"status":"ok","timestamp":1684463930666,"user_tz":-330,"elapsed":10,"user":{"displayName":"The Admin","userId":"02008525212197398114"}},"outputId":"46605080-bcaa-4042-8b60-2b0aec71a6b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CUDA Available? True\n"]}]},{"cell_type":"markdown","source":["CODE BLOCK: 9"],"metadata":{"id":"kCwIPHqwAQgB"}},{"cell_type":"code","source":["\n","from tqdm import tqdm\n","\n","def GetCorrectPredCount(pPrediction, pLabels):\n","  return pPrediction.argmax(dim=1).eq(pLabels).sum().item()\n","\n","def train(model, device, train_loader, optimizer, criterion):\n","  model.train()\n","  pbar = tqdm(train_loader)\n","\n","  train_loss = 0\n","  correct = 0\n","  processed = 0\n","\n","  for batch_idx, (data, target) in enumerate(pbar):\n","    data, target = data.to(device), target.to(device)\n","    optimizer.zero_grad()\n","\n","    # Predict\n","    pred = model(data)\n","\n","    # Calculate loss\n","    loss = criterion(pred, target)\n","    train_loss+=loss.item()\n","\n","    # Backpropagation\n","    loss.backward()\n","    optimizer.step()\n","    \n","    correct += GetCorrectPredCount(pred, target)\n","    processed += len(data)\n","\n","    pbar.set_description(desc= f'Train: Loss={loss.item():0.4f} Batch_id={batch_idx} Accuracy={100*correct/processed:0.2f}')\n","\n","  train_acc.append(100*correct/processed)\n","  train_losses.append(train_loss/len(train_loader))\n","\n","def test(model, device, test_loader, criterion):\n","    model.eval()\n","\n","    test_loss = 0\n","    correct = 0\n","\n","    with torch.no_grad():\n","        for batch_idx, (data, target) in enumerate(test_loader):\n","            data, target = data.to(device), target.to(device)\n","\n","            output = model(data)\n","            test_loss += criterion(output, target, reduction='sum').item()  # sum up batch loss\n","\n","            correct += GetCorrectPredCount(output, target)\n","\n","\n","    test_loss /= len(test_loader.dataset)\n","    test_acc.append(100. * correct / len(test_loader.dataset))\n","    test_losses.append(test_loss)\n","\n","    print('Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'.format(\n","        test_loss, correct, len(test_loader.dataset),\n","        100. * correct / len(test_loader.dataset)))\n","     "],"metadata":{"id":"gpNw3-sy4QGd"},"execution_count":null,"outputs":[]}]}